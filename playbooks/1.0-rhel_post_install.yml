---
- name: Sync SSH Keys
  hosts: all
  become: true
  gather_facts: false

  tasks:      
    - name: Record the post_install_time
      ansible.posix.authorized_key:
      delegate_to: localhost
      register: post_install_time_raw
      changed_when: false
      ansible.builtin.command:
        cmd: "date '+%H:%M:%S'"

    - name: Get services
      check_mode: false
      ansible.builtin.service_facts:

    - name: Pre-check | services state
      ansible.builtin.set_fact:
        pre_check_services: "{{ services }}"
    
    - name: Capture post_install_time
      register: post_install_time
      ansible.builtin.set_stats:
        data:
          post_install_time: "{{ post_install_time_raw.stdout }}"
    
    - name: Making sure all our software is installed
      ansible.builtin.dnf:
        name:
          - insights-client
          - cockpit
        state: installed
    
    - name: Patching my_packages
      register: dnf_patch
      ansible.builtin.dnf:
        name: '*'
        security: true
        skip_broken: true
        update_only: true
        state: latest
    
    - name: Set fact for report
      ansible.builtin.set_fact:
        pkg_mgr_output: "{{ dnf_patch }}"
    
    - name: Register the insights client
      redhat.insights.insights_register:
        state: present
    
    - name: Get the ansible fact from the first play
      ansible.builtin.set_fact:
        my_public_ip: "{{ hostvars['localhost']['my_public_ip'] }}"
    
    - name: Print my_public_ip
      ansible.builtin.debug:
        var: my_public_ip
    
    - name: Update the /etc/hosts file
      ansible.builtin.template:
        src: templates/hosts.j2
        dest: /etc/hosts
        owner: root
        group: root
        mode: "0644"
        backup: true
    
    - name: Copy the sshd-banner file into place
      ansible.builtin.copy:
        src: files/sshd-banner
        dest: /etc/ssh/sshd-banner
        owner: root
        group: root
        mode: u+rw,g-wx,o-wx
    
    - name: Updating the sshd_config file to show the new banner
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: ^#Banner none
        line: Banner /etc/ssh/sshd-banner
    
    - name: Reloading sshd service
      ansible.builtin.systemd:
        state: reloaded
        name: sshd.service
        enabled: true
    
    - name: Copy the new /etc/motd into place
      ansible.builtin.copy:
        src: files/motd
        dest: /etc/motd
        owner: root
        group: root
        mode: u+rw,g-wx,o-wx
    
    - name: Copy the new /etc/issue into place
      ansible.builtin.copy:
        src: files/issue
        dest: /etc/issue
        owner: root
        group: root
        mode: u+rw,g-wx,o-wx
    
    - name: Make sure the /etc/motd.d directory exists
      ansible.builtin.file:
        path: /etc/motd.d
        state: directory
        mode: "0755"
    
    - name: Make sure the /etc/cockpit directory exists
      ansible.builtin.file:
        path: /etc/cockpit
        state: directory
        owner: root
        group: root
        mode: "0755"
    
    - name: Copy the /etc/issue.cockpit into place
      ansible.builtin.copy:
        src: files/issue.cockpit
        dest: /etc/issue.cockpit
        owner: root
        group: root
        mode: u+rw,g-wx,o-wx
    
    - name: Copy the /etc/cockpit/cockpit.conf into place
      ansible.builtin.copy:
        src: files/cockpit.conf
        dest: /etc/cockpit/cockpit.conf
        owner: root
        group: root
        mode: u+rw,g-wx,o-wx
    
    - name: Enable the cockpit socket
      ansible.builtin.systemd_service:
        name: cockpit.socket
        state: started
        enabled: true
    
    - name: Check to see if we need a reboot
      register: reboot_required
      ansible.builtin.stat:
        path: /var/run/reboot-required
    
    - name: Reboot the machine if it is required
      when: reboot_required.stat.exists
      ansible.builtin.reboot:
    
    - name: Get services
      check_mode: false
      ansible.builtin.service_facts:
    
    - name: Save patch reporting facts
      loop:
        - key: "{{ inventory_hostname }}"
          value:
            pre_check_services: "{{ pre_check_services }}"
            services: "{{ services }}"
            pkg_mgr_output: "{{ pkg_mgr_output }}"
      ansible.builtin.set_stats:
        data:
          patch_reports: "{{ patch_reports | default({}) | combine({item.key: item.value}) }}"
